version: '3'

services:

  confd:
    build:
      context: . 
      dockerfile: ./confd/Dockerfile
    networks:
      - confd
    ports:
      - "8008:8008"
      - "8888:8888"
    restart: on-failure

  backend:
    build:
      context: backend
      dockerfile: Dockerfile
      args:
        - YANG_ID_GID=${YANG_ID_GID}
    image: catalog_backend_api:latest
    networks:
      - confd
      - mysql
      - backend
      - elasticsearch
      - rabbitmq
      - frontend
    volumes:
      - ./conf/yangcatalog.conf:/etc/yangcatalog/yangcatalog.conf:ro
      - ${YANG_RESOURCES}:/var/yang:rw
      - webroot:/usr/share/nginx/html
      - run:/var/run/yang
    restart: on-failure

  yang-search:
    build:
      context: search
      dockerfile: Dockerfile
      args:
        - YANG_ID_GID=${YANG_ID_GID}
    networks:
      - mysql
      - backend
      - elasticsearch
      - frontend
    volumes:
      - ./conf/yangcatalog.conf:/etc/yangcatalog/yangcatalog.conf:ro
      - ${YANG_RESOURCES}:/var/yang:rw
      - run:/var/run/yang

  yangre:
    build:
      context: yangre
      dockerfile: Dockerfile
      args:
        - YANG_ID_GID=${YANG_ID_GID}
    networks:
      - frontend
    volumes:
      - run:/var/run/yang
      - ${YANG_RESOURCES}:/var/yang:rw

  api-receiver:
    image: catalog_backend_api:latest
    networks:
      - confd
      - mysql
      - backend
      - elasticsearch
      - rabbitmq
    command: bash -c "source bin/activate; python api/receiver.py"
    volumes:
      - ./conf/yangcatalog.conf:/etc/yangcatalog/yangcatalog.conf:ro
      - ${YANG_RESOURCES}:/var/yang:rw
      - webroot:/usr/share/nginx/html
    restart: on-failure

  api-recovery:
    image: catalog_backend_api:latest
    networks:
      - confd
      - backend
    command: bash -c "source bin/activate; python recovery/recovery.py --type load --protocol http --ip confd"
    volumes:
      - ./conf/yangcatalog.conf:/etc/yangcatalog/yangcatalog.conf:ro
      - ${YANG_RESOURCES}:/var/yang:rw
      - run:/var/run/yang
    depends_on:
      - confd
    restart: on-failure

  frontend:
    build:
      context: .
      dockerfile: web_root/Dockerfile
    networks:
      - mysql
      - frontend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - webroot:/usr/share/nginx/html
      - run:/var/run/yang
      - ${NGINX_LOG}:/var/log/nginx:rw
    depends_on:
      - backend
      - yang-search
      - yangre
      - elasticsearch

  yangvalidator:
    build:
      context: .
      dockerfile: ./bottle-yang-extractor-validator/Dockerfile
      args:
        - YANG_ID_GID=${YANG_ID_GID}
    networks:
      - frontend
    image: yangvalidator:latest
    volumes:
      - ./conf/yangcatalog.conf:/etc/yangcatalog/yangcatalog.conf:ro
      - ${YANG_RESOURCES}:/var/yang:rw
      - run:/var/run/yang

  elasticsearch:
    build:
      context: elasticsearch
      dockerfile: Dockerfile
      args:
        - ELASTICSEARCH_ID_GID=${ELASTICSEARCH_ID_GID}
    networks:
      - elasticsearch
    environment:
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ${ELASTICSEARCH_LOG}:/var/log/elasticsearch
      - ${ELASTICSEARCH_DATA}:/var/lib/elasticsearch
    restart: on-failure

  rabbit:
    image: "rabbitmq:3-management"
    networks:
      - rabbitmq
    environment:
      RABBITMQ_ERLANG_COOKIE: "SWQOKODSQALRPCLNMEQG"
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
      RABBITMQ_DEFAULT_VHOST: "/"
    labels:
      NAME: "rabbitmq1"
    volumes: []
      #- "./enabled_plugins:/etc/rabbitmq/enabled_plugins"
      #- "./rabbitmq.config:/etc/rabbitmq/rabbitmq.config:ro"
      #- "./autocluster-0.4.1.ez:/usr/lib/rabbitmq/lib/rabbitmq_server-3.5.5/plugins/autocluster-0.4.1.ez"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5

  mariadb:
    build:
      context: mysql
      dockerfile: Dockerfile
      args:
        - MYSQL_ID_GID=${MYSQL_ID_GID}
    networks:
      - mysql
    volumes:
      - ${MYSQL_VOLUME}:/var/lib/mysql:rw
      - ./conf/mariadb:/docker-entrypoint-initdb.d:ro
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}

  sdo-analysis:
    build:
      context: .
      dockerfile: ./sdo_analysis/Dockerfile
      args:
        - YANG_ID_GID=${YANG_ID_GID}
    volumes:
      - ./conf/yangcatalog.conf:/etc/yangcatalog/yangcatalog.conf:ro
      - ${YANG_RESOURCES}:/var/yang:rw
      - webroot:/usr/share/nginx/html

volumes:
  webroot:
  run:

networks:
  mysql:
    driver: bridge
  confd:
    driver: bridge
  backend:
    driver: bridge
  elasticsearch:
    driver: bridge
  rabbitmq:
    driver: bridge
  frontend:
    driver: bridge
